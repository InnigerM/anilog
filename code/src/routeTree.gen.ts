/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegistrationImport } from './routes/registration'
import { Route as MapImport } from './routes/map'
import { Route as LeaderboardImport } from './routes/leaderboard'
import { Route as CollectionImport } from './routes/collection'
import { Route as CameraImport } from './routes/camera'
import { Route as IndexImport } from './routes/index'
import { Route as PlantsPlantIdImport } from './routes/plants.$plantId'

// Create/Update Routes

const RegistrationRoute = RegistrationImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRoute,
} as any)

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const LeaderboardRoute = LeaderboardImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRoute,
} as any)

const CollectionRoute = CollectionImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => rootRoute,
} as any)

const CameraRoute = CameraImport.update({
  id: '/camera',
  path: '/camera',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlantsPlantIdRoute = PlantsPlantIdImport.update({
  id: '/plants/$plantId',
  path: '/plants/$plantId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/camera': {
      id: '/camera'
      path: '/camera'
      fullPath: '/camera'
      preLoaderRoute: typeof CameraImport
      parentRoute: typeof rootRoute
    }
    '/collection': {
      id: '/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof CollectionImport
      parentRoute: typeof rootRoute
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationImport
      parentRoute: typeof rootRoute
    }
    '/plants/$plantId': {
      id: '/plants/$plantId'
      path: '/plants/$plantId'
      fullPath: '/plants/$plantId'
      preLoaderRoute: typeof PlantsPlantIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/camera': typeof CameraRoute
  '/collection': typeof CollectionRoute
  '/leaderboard': typeof LeaderboardRoute
  '/map': typeof MapRoute
  '/registration': typeof RegistrationRoute
  '/plants/$plantId': typeof PlantsPlantIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/camera': typeof CameraRoute
  '/collection': typeof CollectionRoute
  '/leaderboard': typeof LeaderboardRoute
  '/map': typeof MapRoute
  '/registration': typeof RegistrationRoute
  '/plants/$plantId': typeof PlantsPlantIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/camera': typeof CameraRoute
  '/collection': typeof CollectionRoute
  '/leaderboard': typeof LeaderboardRoute
  '/map': typeof MapRoute
  '/registration': typeof RegistrationRoute
  '/plants/$plantId': typeof PlantsPlantIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/camera'
    | '/collection'
    | '/leaderboard'
    | '/map'
    | '/registration'
    | '/plants/$plantId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/camera'
    | '/collection'
    | '/leaderboard'
    | '/map'
    | '/registration'
    | '/plants/$plantId'
  id:
    | '__root__'
    | '/'
    | '/camera'
    | '/collection'
    | '/leaderboard'
    | '/map'
    | '/registration'
    | '/plants/$plantId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CameraRoute: typeof CameraRoute
  CollectionRoute: typeof CollectionRoute
  LeaderboardRoute: typeof LeaderboardRoute
  MapRoute: typeof MapRoute
  RegistrationRoute: typeof RegistrationRoute
  PlantsPlantIdRoute: typeof PlantsPlantIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CameraRoute: CameraRoute,
  CollectionRoute: CollectionRoute,
  LeaderboardRoute: LeaderboardRoute,
  MapRoute: MapRoute,
  RegistrationRoute: RegistrationRoute,
  PlantsPlantIdRoute: PlantsPlantIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/camera",
        "/collection",
        "/leaderboard",
        "/map",
        "/registration",
        "/plants/$plantId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/camera": {
      "filePath": "camera.tsx"
    },
    "/collection": {
      "filePath": "collection.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/registration": {
      "filePath": "registration.tsx"
    },
    "/plants/$plantId": {
      "filePath": "plants.$plantId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
