/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MapImport } from './routes/map'
import { Route as CollectionImport } from './routes/collection'
import { Route as CameraImport } from './routes/camera'
import { Route as IndexImport } from './routes/index'
import { Route as PlantsPlantIdImport } from './routes/plants.$plantId'

// Create/Update Routes

const CollectionRoute = CollectionImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => rootRoute,
} as any)

const CollectionRoute = CollectionImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => rootRoute,
} as any)

const CameraRoute = CameraImport.update({
  id: '/camera',
  path: '/camera',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlantsPlantIdRoute = PlantsPlantIdImport.update({
  id: '/plants/$plantId',
  path: '/plants/$plantId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/camera': {
      id: '/camera'
      path: '/camera'
      fullPath: '/camera'
      preLoaderRoute: typeof CameraImport
      parentRoute: typeof rootRoute
    }
    '/collection': {
      id: '/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof CollectionImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      '/plants/$plantId': {
        id: '/plants/$plantId'
        path: '/plants/$plantId'
        fullPath: '/plants/$plantId'
        preLoaderRoute: typeof PlantsPlantIdImport
        parentRoute: typeof rootRoute
      }
    }
  }

  // Create and export the route tree

  export interface FileRoutesByFullPath {
    '/': typeof IndexRoute
    '/camera': typeof CameraRoute
    '/collection': typeof CollectionRoute
    '/map': typeof MapRoute
    '/plants/$plantId': typeof PlantsPlantIdRoute
  }

  export interface FileRoutesByTo {
    '/': typeof IndexRoute
    '/camera': typeof CameraRoute
    '/collection': typeof CollectionRoute
    '/map': typeof MapRoute
    '/plants/$plantId': typeof PlantsPlantIdRoute
  }

  export interface FileRoutesById {
    __root__: typeof rootRoute
    '/': typeof IndexRoute
    '/camera': typeof CameraRoute
    '/collection': typeof CollectionRoute
    '/map': typeof MapRoute
    '/plants/$plantId': typeof PlantsPlantIdRoute
  }

  export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath
    fullPaths: '/' | '/about' | '/camera' | '/collection' | '/map'
    fileRoutesByTo: FileRoutesByTo
    to: '/' | '/about' | '/camera' | '/collection' | '/map'
    id: '__root__' | '/' | '/about' | '/camera' | '/collection' | '/map'
    fullPaths: '/' | '/camera' | '/collection' | '/plants/$plantId'
    fileRoutesByTo: FileRoutesByTo
    to: '/' | '/camera' | '/collection' | '/plants/$plantId'
    id: '__root__' | '/' | '/camera' | '/collection' | '/plants/$plantId'
    fileRoutesById: FileRoutesById
  }

  export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute
    CameraRoute: typeof CameraRoute
    CollectionRoute: typeof CollectionRoute
    MapRoute: typeof MapRoute
    PlantsPlantIdRoute: typeof PlantsPlantIdRoute
  }

  const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    CameraRoute: CameraRoute,
    CollectionRoute: CollectionRoute,
    MapRoute: MapRoute,
    PlantsPlantIdRoute: PlantsPlantIdRoute,
  }

  export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/camera",
        "/collection",
        "/map"
        "/plants/$plantId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/camera": {
      "filePath": "camera.tsx"
    },
    "/collection": {
      "filePath": "collection.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    "/plants/$plantId": {
      "filePath": "plants.$plantId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
